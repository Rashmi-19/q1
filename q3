#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#include <omp.h>

#define NUM_CHAIRS 5        // Number of waiting chairs
#define NUM_CUSTOMERS 10    // Number of customers arriving
#define HAIRCUT_DURATION 5  // Duration of a haircut in seconds

// Semaphores and shared resources
int waiting_customers = 0;
sem_t mutex;                // Mutex for shared variables
sem_t barber_available;      // Semaphore to indicate barber is available
sem_t customer_ready;        // Semaphore to indicate a customer is ready

// Barber Function
void* barber(void* arg) {
    while (1) {
        sem_wait(&customer_ready);  // Wait for a customer to be ready
        sem_wait(&mutex);           // Lock critical section
        
        waiting_customers--;        // One customer is getting a haircut
        printf("Barber is cutting hair. Waiting customers: %d\n", waiting_customers);
        
        sem_post(&mutex);           // Unlock critical section
        sleep(HAIRCUT_DURATION);    // Simulate haircut time
        
        sem_post(&barber_available); // Signal that the barber is available
    }
}

// Customer Function
void* customer(void* arg) {
    int id = *(int*)arg;
    sem_wait(&mutex); // Lock critical section

    if (waiting_customers < NUM_CHAIRS) {
        waiting_customers++; // Increment waiting customers
        printf("Customer %d is waiting. Total waiting customers: %d\n", id, waiting_customers);
        
        sem_post(&mutex); // Unlock critical section
        sem_post(&customer_ready);  // Notify the barber
        sem_wait(&barber_available); // Wait for the barber to finish
        
        printf("Customer %d is getting a haircut.\n", id);
    } else {
        printf("Customer %d found no available chairs and left the shop.\n", id);
        sem_post(&mutex); // Unlock critical section
    }
    return NULL;
}

int main() {
    pthread_t barber_thread;
    pthread_t customers[NUM_CUSTOMERS];
    int customer_ids[NUM_CUSTOMERS];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&barber_available, 0, 0);
    sem_init(&customer_ready, 0, 0);

    // Create the barber thread
    pthread_create(&barber_thread, NULL, barber, NULL);

    // Simulate customer arrivals using OpenMP parallelism
    #pragma omp parallel for
    for (int i = 0; i < NUM_CUSTOMERS; i++) {
        sleep(rand() % 2 + 1); // Random arrival time
        customer_ids[i] = i + 1;
        pthread_create(&customers[i], NULL, customer, &customer_ids[i]);
    }

    // Join customer threads
    for (int i = 0; i < NUM_CUSTOMERS; i++) {
        pthread_join(customers[i], NULL);
    }

    // Cleanup semaphores
    sem_destroy(&mutex);
    sem_destroy(&barber_available);
    sem_destroy(&customer_ready);

    return 0;
}
