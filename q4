#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#include <omp.h>

#define NUM_PHILOSOPHERS 5  // Number of philosophers
#define NUM_MEALS 1         // Number of meals each philosopher eats

// Forks (represented as semaphores)
sem_t forks[NUM_PHILOSOPHERS];

// Philosopher function
void* philosopher(void* arg) {
    int id = *(int*)arg;

    for (int meal = 0; meal < NUM_MEALS; meal++) {
        // Thinking
        printf("Philosopher %d is thinking.\n", id);
        sleep(rand() % 3 + 1);  // Simulate thinking time

        // Pick up left fork
        sem_wait(&forks[id]);
        printf("Philosopher %d picked up left fork.\n", id);

        // Pick up right fork
        sem_wait(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d picked up right fork.\n", id);

        // Eating
        printf("Philosopher %d is eating.\n", id);
        sleep(rand() % 3 + 1);  // Simulate eating time

        // Put down forks
        sem_post(&forks[id]);
        sem_post(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d put down both forks.\n", id);
    }

    printf("Philosopher %d has finished eating.\n", id);
    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    // Initialize semaphores (forks)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);
    }

    // Simulate philosophers using OpenMP parallelism
    #pragma omp parallel for
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Wait for all philosophers to finish
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Cleanup semaphores
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}
