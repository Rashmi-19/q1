#WS9 q1
# slr parsing

from collections import defaultdict
from prettytable import PrettyTable

def slr(s, parsing_table, n_nt, stack, action_l):

    table = PrettyTable()
    table.field_names = ["Stack", "Action", "Input String"]

    while len(s):
        action = parsing_table[stack[-1]][s[0]]

        if action == "accept":
            action_l.append(action)
            print("-> ACCEPTED")
            break
        if action == "-":
            action_l.append("not accepted")
            print("-> REJECTED")
            break

        s_shift = action.split(":")
        action_l.append(s_shift[0] + " " + s_shift[1])

        if s_shift[0] == "Shift":
            stack.append(s[0])
            stack.append(s_shift[1])
            s = s[1:]
        elif s_shift[0] == "Reduce":
            s_reduce = s_shift[1].split("->")
            replace_string = ""
            stack_replace_string = ""

            for i in range(len(stack) - 1, 0, -1):
                stack_replace_string += stack[i]
                if stack[i] in n_nt:
                    replace_string += stack[i]
                rev_s = replace_string[::-1]
                if rev_s == s_reduce[1]:
                    break

            for i in range(len(stack_replace_string)):
                stack.pop()
            stack.append(s_reduce[0])
            stack.append(parsing_table[stack[-2]][stack[-1]])

        table.add_row(["".join(stack), action_l[-1], s])
    print("\n\nPARSING TABLE\n")
    print(table)

with open("slr_table.txt",'r') as file:
    f=file.readlines()

parsing_table = defaultdict(dict)
n_nt = []

for line in f:
    x = line.strip('\n')
    y = x.split()
    if y[0] == "state":
        n_nt = y[1:]
        continue
    for i in range(len(n_nt)):
        parsing_table[y[0]][n_nt[i]] = y[i + 1]



s = input("Enter input string: ")
s += "$"
stack = ['0']
action_l = []
slr(s, parsing_table, n_nt,stack,action_l)


state + * i $ E T F
0 - - Shift:4 - 1 2 3
1 Shift:5 - - ACCEPT - - -
2 Reduce:E->T Shift:6 - Reduce:E->T - - -
3 Reduce:T->F Reduce:T->F - Reduce:T->F - - -
4 Reduce:F->i Reduce:F->i - Reduce:F->i - - -
5 - - Shift:4 - - 7 3
6 - - Shift:4 - - - 8
7 Reduce:E->E+T Shift:6 - Reduce:E->E+T - - -
8 Reduce:T->T*F Reduce:T->T*F - Reduce:T->T*F - - -
