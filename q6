/* Server Code */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <omp.h>

#define DEFAULT_PORT 4200
#define BUFFER_SIZE 1024
#define MAX_CLIENTS 10

typedef struct {
    char login_name[50];
    char full_name[100];
} User;

User users[MAX_CLIENTS] = {
    {"user1", "Alice Johnson"},
    {"user2", "Bob Smith"},
    {"user3", "Charlie Brown"},
    {"user4", "David Wilson"},
    {"user5", "Eve Adams"}
};
int user_count = 5;

void *handle_client(void *client_sock) {
    int sock = *(int *)client_sock;
    free(client_sock);
    char buffer[BUFFER_SIZE];
    ssize_t received = recv(sock, buffer, BUFFER_SIZE - 1, 0);
    if (received <= 0) {
        close(sock);
        return NULL;
    }
    buffer[received] = '\0';
    
    char response[BUFFER_SIZE] = "Sorry, no match to your query!";
    for (int i = 0; i < user_count; i++) {
        if (strcmp(buffer, users[i].login_name) == 0) {
            snprintf(response, BUFFER_SIZE, "Login Name: %s, Full Name: %s", users[i].login_name, users[i].full_name);
            break;
        }
    }
    send(sock, response, strlen(response), 0);
    close(sock);
    return NULL;
}

void start_server(int port) {
    int server_sock = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in server_addr = {0};
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(port);
    
    bind(server_sock, (struct sockaddr *)&server_addr, sizeof(server_addr));
    listen(server_sock, MAX_CLIENTS);
    
    printf("Server listening on port %d...\n", port);
    while (1) {
        struct sockaddr_in client_addr;
        socklen_t client_len = sizeof(client_addr);
        int *client_sock = malloc(sizeof(int));
        *client_sock = accept(server_sock, (struct sockaddr *)&client_addr, &client_len);
        
        #pragma omp parallel num_threads(4)
        {
            #pragma omp single
            pthread_t thread;
            pthread_create(&thread, NULL, handle_client, client_sock);
            pthread_detach(thread);
        }
    }
    close(server_sock);
}

int main(int argc, char *argv[]) {
    int port = DEFAULT_PORT;
    if (argc > 1) {
        port = atoi(argv[1]);
    }
    start_server(port);
    return 0;
}

/* Client Code */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define BUFFER_SIZE 1024

void start_client(const char *server_host, int server_port) {
    int client_sock = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in server_addr = {0};
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(server_port);
    inet_pton(AF_INET, server_host, &server_addr.sin_addr);
    
    if (connect(client_sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Could not connect to server");
        exit(EXIT_FAILURE);
    }
    
    char username[BUFFER_SIZE];
    printf("Enter username to query: ");
    fgets(username, BUFFER_SIZE, stdin);
    username[strcspn(username, "\n")] = 0;
    
    send(client_sock, username, strlen(username), 0);
    
    char response[BUFFER_SIZE];
    ssize_t received = recv(client_sock, response, BUFFER_SIZE - 1, 0);
    if (received > 0) {
        response[received] = '\0';
        printf("Server response: %s\n", response);
    }
    close(client_sock);
}

int main(int argc, char *argv[]) {
    const char *server_host = "127.0.0.1";
    int server_port = DEFAULT_PORT;
    if (argc > 1) server_host = argv[1];
    if (argc > 2) server_port = atoi(argv[2]);
    start_client(server_host, server_port);
    return 0;
}
