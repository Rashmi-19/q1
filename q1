def calculate_area_and_weighted_area(rule, fuzzy_value):
    throttle_mem = membership_values[rule[2]]
    
    m1 = (1 - 0) / (throttle_mem[1] - throttle_mem[0])
    m2 = (0 - 1) / (throttle_mem[3] - throttle_mem[2])
    
    a1 = (fuzzy_value - 0) * (throttle_mem[1] - throttle_mem[0]) / m1 + throttle_mem[0]
    a2 = (fuzzy_value - 1) * (throttle_mem[3] - throttle_mem[2]) / m2 + throttle_mem[2]
    
    a = a2 - a1
    b = throttle_mem[3] - throttle_mem[0]
    
    plt.plot([a1, a2], [fuzzy_value, fuzzy_value])
    
    area = 0.5 * fuzzy_value * (a + b)
    weighted_area = area * (throttle_mem[1] + throttle_mem[2]) / 2
    
    return (area, weighted_area)
----
import matplotlib.pyplot as plt
import numpy as np

y = [1, 1, 0, 1, 0, 1, 0, 1, 1]
y1 = [0, 0, 1, 0, 1, 0, 1, 0, 0]
speed = [0, 31, 61, 95, 127, 159, 191, 223, 255]
acc = [0, 31, 61, 95, 127, 159, 191, 223, 255]
tc = [0, 31, 61, 95, 127, 159, 191, 223, 255]

plt.subplot(3, 1, 1)  
plt.plot(speed, y, color='blue')
plt.plot(speed, y1, color='blue')
plt.xticks(speed)
plt.title('Speed Data')

plt.subplot(3, 1, 2)
plt.plot(acc, y, color='red')
plt.plot(acc, y1, color='red')
plt.xticks(acc)
plt.title('Acceleration Data')

plt.subplot(3, 1, 3)
plt.plot(tc, y, color='green')
plt.plot(tc, y1, color='green')
plt.xticks(tc)
plt.title('Throttle control Data')

plt.tight_layout()  

plt.show()

s_val=int(input("Enter speed val:"))
closest_lower_idx = np.where(np.array(speed) < s_val)[0][-1]
closest_upper_idx = np.where(np.array(speed) > s_val)[0][0]

y_1= y[closest_lower_idx] + ((y[closest_upper_idx] - y[closest_lower_idx]) / (speed[closest_upper_idx] - speed[closest_lower_idx])) * (s_val - speed[closest_lower_idx])
y1_1 = y1[closest_lower_idx] + ((y1[closest_upper_idx] - y1[closest_lower_idx]) / (speed[closest_upper_idx] - speed[closest_lower_idx])) * (s_val - speed[closest_lower_idx])

print(f"Interpolated value of y at speed = {s_val}: {y_1}")
print(f"Interpolated value of y1 at speed = {s_val}: {y1_1}")

a_val=int(input("Enter acc val:"))
closest_lower_idx1 = np.where(np.array(speed) < a_val)[0][-1]
closest_upper_idx1 = np.where(np.array(speed) > a_val)[0][0]

y2= y[closest_lower_idx1] + ((y[closest_upper_idx1] - y[closest_lower_idx1]) / (acc[closest_upper_idx1] - acc[closest_lower_idx1])) * (a_val - acc[closest_lower_idx1])
y1_2 = y1[closest_lower_idx1] + ((y1[closest_upper_idx1] - y1[closest_lower_idx1]) / (acc[closest_upper_idx1] - acc[closest_lower_idx1])) * (a_val - acc[closest_lower_idx1])

print(f"Interpolated value of y at acc = {a_val}: {y2}")
print(f"Interpolated value of y1 at acc = {a_val}: {y1_2}")
