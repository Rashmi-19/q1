#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <omp.h>
#include <semaphore.h>

#define CAPACITY 10 // Buffer capacity
#define ITEMS_TO_PRODUCE 20

int buffer[CAPACITY];  // Shared buffer
int in_index = 0, out_index = 0;

// Semaphores
sem_t mutex, empty, full;

// Producer Function
void producer() {
    int items_produced = 0, counter = 0;
    
    while (items_produced < ITEMS_TO_PRODUCE) {
        sem_wait(&empty);  // Wait if buffer is full
        sem_wait(&mutex);  // Lock critical section

        counter++;
        buffer[in_index] = counter;
        in_index = (in_index + 1) % CAPACITY;
        printf("Producer produced: %d\n", counter);

        sem_post(&mutex);  // Release lock
        sem_post(&full);   // Signal consumer
        
        sleep(1);  // Simulate production time
        items_produced++;
    }
}

// Consumer Function
void consumer() {
    int items_consumed = 0;
    
    while (items_consumed < ITEMS_TO_PRODUCE) {
        sem_wait(&full);   // Wait if buffer is empty
        sem_wait(&mutex);  // Lock critical section

        int item = buffer[out_index];
        out_index = (out_index + 1) % CAPACITY;
        printf("Consumer consumed item: %d\n", item);

        sem_post(&mutex);  // Release lock
        sem_post(&empty);  // Signal producer

        sleep(2.5);  // Simulate consumption time
        items_consumed++;
    }
}

int main() {
    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&empty, 0, CAPACITY);
    sem_init(&full, 0, 0);

    // Parallel region using OpenMP
    #pragma omp parallel sections
    {
        #pragma omp section
        {
            producer();
        }

        #pragma omp section
        {
            consumer();
        }
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}
