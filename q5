#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <omp.h>

#define BUS_CAPACITY 5  // Total seats in the bus
#define NUM_PASSENGERS 10 // Total passengers trying to board

pthread_mutex_t lock;  // Mutex for synchronizing access to bus
int passengers_on_bus = 0; // Counter for passengers onboard

// Function to simulate passenger boarding
void* board_passenger(void* arg) {
    int id = *(int*)arg;

    sleep(rand() % 2 + 1); // Simulate arrival time

    pthread_mutex_lock(&lock);
    if (passengers_on_bus < BUS_CAPACITY) {
        passengers_on_bus++;
        printf("Passenger %d boarded. Seats left: %d\n", id, BUS_CAPACITY - passengers_on_bus);
    } else {
        printf("Passenger %d couldn't board. The bus is full.\n", id);
    }
    pthread_mutex_unlock(&lock);
    
    return NULL;
}

int main() {
    pthread_t passengers[NUM_PASSENGERS];
    int ids[NUM_PASSENGERS];

    pthread_mutex_init(&lock, NULL);  // Initialize mutex

    // Parallel execution using OpenMP
    #pragma omp parallel for
    for (int i = 0; i < NUM_PASSENGERS; i++) {
        ids[i] = i + 1;
        pthread_create(&passengers[i], NULL, board_passenger, &ids[i]);
    }

    // Wait for all passenger threads to finish
    for (int i = 0; i < NUM_PASSENGERS; i++) {
        pthread_join(passengers[i], NULL);
    }

    printf("Bus Status: ");
    if (passengers_on_bus >= BUS_CAPACITY) {
        printf("The bus is full. It departs now.\n");
    } else {
        printf("The bus departs with empty seats.\n");
    }

    pthread_mutex_destroy(&lock); // Clean up mutex
    return 0;
}
